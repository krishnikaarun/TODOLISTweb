var taskInput = document.getElementById("new-task");//Add a new task.
var addButton = document.getElementsByTagName("button")[0];//first button
var incompleteTaskHolder = document.getElementById("incomplete-tasks");//ul of #incomplete-tasks
var completedTasksHolder = document.getElementById("completed-tasks");//completed-tasks


//New task list item
var createNewTaskElement = function (taskString) {

	var listItem = document.createElement("li");

	//input (checkbox)
	var checkBox = document.createElement("input");//checkbx
	//label
	var label = document.createElement("label");//label
	//input (text)
	var editInput = document.createElement("input");//text
	//button.edit
	var editButton = document.createElement("button");//edit button

	//button.delete
	var deleteButton = document.createElement("button");//delete button

	label.innerText = taskString;

	//Each elements, needs appending
	checkBox.type = "checkbox";
	editInput.type = "text";

	editButton.innerText = "Edit";//innerText encodes special characters, HTML does not.
	editButton.className = "edit";
	deleteButton.innerText = "Delete";
	deleteButton.className = "delete";



	//and appending.
	listItem.appendChild(checkBox);
	listItem.appendChild(label);
	listItem.appendChild(editInput);
	listItem.appendChild(editButton);
	listItem.appendChild(deleteButton);
	return listItem;
}



var addTask = function () {
	console.log("Add Task...");
	//Create a new list item with the text from the #new-task:
	var listItem = createNewTaskElement(taskInput.value);

	//Append listItem to incompleteTaskHolder
	incompleteTaskHolder.appendChild(listItem);
	bindTaskEvents(listItem, taskCompleted);

	taskInput.value = "";

}



//Delete task.
var deleteTask = function () {
	console.log("Delete Task...");

	var listItem = this.parentNode;
	var ul = listItem.parentNode;
	//Remove the parent list item from the ul.
	ul.removeChild(listItem);

}


//Mark task completed
var taskCompleted = function () {
	console.log("Complete Task...");

	//Append the task list item to the #completed-tasks
	var listItem = this.parentNode;
	completedTasksHolder.appendChild(listItem);
	bindTaskEvents(listItem, taskIncomplete);

}


var taskIncomplete = function () {
	console.log("Incomplete Task...");
	//Mark task as incomplete.
	//When the checkbox is unchecked
	//Append the task list item to the #incomplete-tasks.
	var listItem = this.parentNode;
	incompleteTaskHolder.appendChild(listItem);
	bindTaskEvents(listItem, taskCompleted);
}



var ajaxRequest = function () {
	console.log("AJAX Request");
}

//The glue to hold it all together.


//Set the click handler to the addTask function.
addButton.onclick = addTask;
addButton.addEventListener("click", addTask);
addButton.addEventListener("click", ajaxRequest);


var bindTaskEvents = function (taskListItem, checkBoxEventHandler) {
	console.log("bind list item events");
	//select ListItems children
	var checkBox = taskListItem.querySelector("input[type=checkbox]");
	var editButton = taskListItem.querySelector("button.edit");
	var deleteButton = taskListItem.querySelector("button.delete");


	//Bind editTask to edit button.
	editButton.onclick = editTask;
	//Bind deleteTask to delete button.
	deleteButton.onclick = deleteTask;
	//Bind taskCompleted to checkBoxEventHandler.
	checkBox.onchange = checkBoxEventHandler;
}

//cycle over incompleteTaskHolder ul list items
//for each list item
for (var i = 0; i < incompleteTaskHolder.children.length; i++) {

	//bind events to list items chldren(tasksCompleted)
	bindTaskEvents(incompleteTaskHolder.children[i], taskCompleted);
}




//cycle over completedTasksHolder ul list items
for (var i = 0; i < completedTasksHolder.children.length; i++) {
	//bind events to list items chldren(tasksIncompleted)
	bindTaskEvents(completedTasksHolder.children[i], taskIncomplete);
}




// Issues with usabiliy don't get seen until they are in front of a human tester.

//prevent creation of empty tasks.

//Shange edit to save when you are in edit mode.




<!DOCTYPE html>
<html>
<head>
    <title>TO DO LIST</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script type="text/javascript" src="JavaScript.js"></script>
</head>
<body>
    <div class="inputDiv">
        <input type="text" placeholder="Type something..." id="ipbox" autofocus>
        <button id="add" onclick="addTask(ipbox)">+</button>
    </div>
    <div class="list">
        <ul id="incomplete">
            <p>Incompleted Task!</p>
            <li><input type="checkbox"><label id="label">NOT DONE</label><button id="delete" onclick="removeElement(label)">X</button></li>
        </ul>
        <ul id="completed">
            <p>Completed Task!</p>
            <li><input type="checkbox" checked><label> <del>DONE</del></label><button id="delete" onclick="removeElement(label)">X</button></li>
        </ul>
    </div>
</body>
</html>


<!DOCTYPE html>
<html>
<head>
    <title>TO DO LIST</title>
    <link rel="stylesheet" type="text/css" href="style.css">
    <script type="text/javascript" src="JavaScript.js"></script>
</head>
<body>
    <div class="inputDiv">
        <input type="text" placeholder="Type something..." id="ipbox" autofocus>
        <button id="add" onclick="addTask(ipbox)">+</button>
    </div>
    <div class="list">
        <p>Incompleted Task!</p>
        <ul id="incomplete">
            <li><input type="checkbox"><label id="label">NOT DONE</label><button id="delete" onclick="deleteTask(label)">X</button></li>
        </ul>
        <p>Completed Task!</p>
        <ul id="completed">
            <li><input type="checkbox" checked><label> <del>DONE</del></label><button id="delete" onclick="removeElement(label)">X</button></li>
        </ul>
    </div>
</body>
</html>

///////////////////////

var taskInput=document.getElementById("new-task");
var addButton=document.getElementsByTagName("button")[0];
var incompleteTaskHolder=document.getElementById("incomplete-tasks");
var completedTasksHolder=document.getElementById("completed-tasks");

var createNewTaskElement=function(taskString){
	var listItem=document.createElement("li");
	var checkBox=document.createElement("input");
	var label=document.createElement("label");
	var deleteButton=document.createElement("button");
	label.innerText=taskString;
	checkBox.type="checkbox";
	deleteButton.innerText="Delete";
	deleteButton.className="delete";
	listItem.appendChild(checkBox);
	listItem.appendChild(label);
	listItem.appendChild(deleteButton);
	return listItem;
}



var addTask=function(){
	var listItem=createNewTaskElement(taskInput.value);
	incompleteTaskHolder.appendChild(listItem);
	bindTaskEvents(listItem, taskCompleted);
	taskInput.value="";
	var a = listItem.len ;
	console.log(a);
}


var deleteTask=function(){
		var listItem=this.parentNode;
		var ul=listItem.parentNode;
		ul.removeChild(listItem);
}

var taskCompleted=function(){
	var listItem=this.parentNode;
	completedTasksHolder.appendChild(listItem);
	bindTaskEvents(listItem, taskIncomplete);

}


var taskIncomplete=function(){
	var listItem=this.parentNode;
	incompleteTaskHolder.appendChild(listItem);
	bindTaskEvents(listItem,taskCompleted);
}



var ajaxRequest=function(){
	console.log("AJAX Request");
}

addButton.onclick=addTask;
addButton.addEventListener("click",addTask);


var bindTaskEvents=function(taskListItem,checkBoxEventHandler){
	var checkBox=taskListItem.querySelector("input[type=checkbox]");
	var deleteButton=taskListItem.querySelector("button.delete");
			deleteButton.onclick=deleteTask;
			checkBox.onchange=checkBoxEventHandler;
}